=> We can also configure a jsp file within the web.xml file.


<web-app>

	<servlet>
  <servlet-name> one </servlet-name>
  <jsp-file>/welcome.jsp</jsp-file>

  <init-param>
  <param-name>configInfo</param-name>
  <param-value>SrinuDBUserData</param-value>
  </init-param>

  </servlet>
  
  	<servlet-mapping>
  	<servlet-name> one </servlet-name>
  	<url-pattern>/test</url-pattern>
  	</servlet-mapping>

</web-app>


index.jsp
*********
<a href="./test">Click Here </a>

welcome.jsp
***********

	Value : <%= config.getInitParameter("configInfo") %>

*******************************************************************

Directives in JSP's :-
********************

We have three types of  Directives in JSP's 

	1. Page directive
	2. include directive
	3. taglib directive


Syntax to write directive 

	<%@ directiveName attribute = value %>


JSP "page" directive
******************

The page directive defines attributes that apply to an entire JSP page.

Syntax of JSP page directive

<%@ page attribute="value" %>  

Attributes of JSP page directive

import
contentType
extends
info
buffer
language
isELIgnored
isThreadSafe
errorPage
isErrorPage



1)import

The import attribute is used to import class,interface or all the members of a package.
It is similar to import keyword in java class or interface.

Example of import attribute

<html>  
<body>  
  
<%@ page import="java.util.Date" %>  
Today is: <%= new Date() %>  
  
</body>  
</html>  


2)contentType

The contentType attribute defines the MIME(Multipurpose Internet Mail Extension) type of the HTTP response.
The default value is "text/html".

Example of contentType attribute

<html>  
<body>  
  
<%@ page contentType="application/msword" %>  
Today is: <%= new java.util.Date() %>  
  
</body>  
</html>  

3)extends

The extends attribute defines the parent class that will be inherited by the generated servlet.It is rarely used.

4)info

This attribute simply sets the information of the JSP page which is retrieved later by using getServletInfo() method of Servlet interface.

Example of info attribute

<html>  
<body>  
  
<%@ page info="composed by Srinu" %>  

Today is: <%= new java.util.Date() %>  
  
</body>  
</html>  


The web container will create a method getServletInfo() in the resulting servlet.For example:

public String getServletInfo() {  
  return "composed by Srinu";   
}  


5)buffer

The buffer attribute sets the buffer size in kilobytes to handle output generated by the JSP page.
The default size of the buffer is 8Kb.

Example of buffer attribute

<html>  
<body>  
  
<%@ page buffer="16kb" %>  
Today is: <%= new java.util.Date() %>  
  
</body>  
</html>  

6)language

The language attribute specifies the scripting language used in the JSP page. The default value is "java".


7)isELIgnored

We can ignore the Expression Language (EL) in jsp by the isELIgnored attribute. By default its value is false i.e. Expression Language is enabled by default. 

<%@ page isELIgnored="true" %>//Now EL will be ignored  

8)isThreadSafe

Servlet and JSP both are multithreaded.If you want to control this behaviour of JSP page, you can use isThreadSafe attribute of page directive.The value of isThreadSafe value is true.If you make it false, the web container will serialize the multiple requests, i.e. it will wait until the JSP finishes responding to a request before passing another request to it.If you make the value of isThreadSafe attribute like:
<%@ page isThreadSafe="false" %>

The web container in such a case, will generate the servlet as:

public class SimplePage_jsp extends HttpJspBase   
  implements SingleThreadModel{  
.......  
}  

9)errorPage

The errorPage attribute is used to define the error page, if exception occurs in the current page, it will be redirected to the error page.

Example of errorPage attribute

//index.jsp  
<html>  
<body>  
  
<%@ page errorPage="myerrorpage.jsp" %>  
  
 <%= 100/0 %>  
  
</body>  
</html>  


10)isErrorPage

The isErrorPage attribute is used to declare that the current page is the error page.

Note: The exception object can only be used in the error page.

Example of isErrorPage attribute

//myerrorpage.jsp  
<html>  
<body>  
  
<%@ page isErrorPage="true" %>  
  
 Sorry an exception occured!<br/>  
The exception is: <%= exception %>  
  
</body>  
</html>  


Jsp Include Directive
*********************

Include directive

The include directive is used to include the contents of any resource it may be jsp file, html file or text file. The include directive includes the original content of the included resource at page translation time (the jsp page is translated only once so it will be better to include static resource).

Advantage of Include directive
*****************************

Code Reusability

Syntax of include directive

<%@ include file="resourceName" %>  
Example of include directive

In this example, we are including the content of the header.html file. To run this example you must create an header.html file.

<html>  
<body>  
  
<%@ include file="header.html" %>  
  
Today is: <%= java.util.Calendar.getInstance().getTime() %>  
  
</body>  
</html>  


3. taglib directive :- we will discuss.
   ***************

	

*****************************

Exception Handling in JSP


The exception is normally an object that is thrown at runtime.Exception Handling is the process to handle the runtime errors. 

There may occur exception any time in your web application. So handling exceptions is a safer side for the web developer. In JSP, there are two ways to perform exception handling:

1. By errorPage and isErrorPage attributes of page directive

=> Define errorPage attribute within the soure file.

	welcome.jsp 
	**********
	<%@ page erorrPage = "./error.jsp" %>
.....
.....

	error.jsp 
	**********
<%@ page isErorrPage = "true" %>
	
	Exception is : <%= exception %>
	

	refer ExceptionHandlingApp


2. By <error-page> element in web.xml file

	refer ExpApp2

within the web.xml we will add following tag

	<error-page>  
  <exception-type>java.lang.Exception</exception-type>  
  <location>/error.jsp</location>  
  	</error-page>

	This will be applicable to all the jsps. So that it is called global level exception handling.



JSP Action tags :-
***************

In jsp's the  RequestDispatcher concept can be available to us in the form of <jsp:forward> , <jsp:include> tags.

<jsp:forward > :-  It is equals to RequestDispatcher forward concept.

	<jsp:forward  page="relative URL" />

	<jsp:forward  page="result.jsp" />

	

<jsp:include > :-It is equals to RequestDispatcher include concept.

	<jsp:include  page="relative URL" />

	<jsp:include  page="result.jsp" />

The <jsp:include > can include content dynamically.





				JSTL :-
				****

=> JSTL is a predefined library , which will be avaialable to us in the form jstl.jar file.

=> JSTL has given predefined tags by using  these tags we can access the data without using scriptlet and expression tags.

=> If we use JSTL tags we can avoid java code within the jsp file.

=> We should import JSTL library within our jsp file using taglib directive.

JSTL Core Tags :-
**************

The JSTL core tag provides variable support, URL management, flow control etc. The syntax used for including JSTL core library in your JSP is:

<%@ taglib uri="http://java.sun.com/jstl/core_rt" prefix="c" %>  

JSTL Core Tags List

Tags		Description

c:out	It display the result of an expression, similar to the way <%=...%> tag work.

<c:out value="${scopevariablename}" />

c:redirect	It redirects the browser to a new URL and supports the context-relative URLs.


c:import	It Retrives relative or an absolute URL and display the contents to either a String in 'var',a Reader in 'varReader' or the page.


c:set	It sets the result of an expression under evaluation in a 'scope' variable.

c:if	It is conditional tag used for testing the condition and display the body content only if the expression evaluates is true.

Ex:-
**** refer JSTLApp1




c:choose, c:when, c:otherwise	It is the simple conditional tag that includes its body content if the evaluated condition is true.

	refer JSTLAPP2
		
	


c:remove	It is used for removing the specified scoped variable from a particular scope.


	It will remove variable from the specified scope 

		Ex:- 
		<c:set var="name" scope="session" value="${username}"></c:set>

		userName : <c:out value="${name}" /> Gives the name 

		<c:remove var="name" scope="session"></c:set>

		userName : <c:out value="${name}" /> Given name is allready removed we won't get the name 

	


c:catch	 : It is used for Catches any Throwable exceptions that occurs in the body.



c:forEach :	It is the basic iteration tag. It repeats the nested body content for fixed number of times or over 				collection.

c:forTokens	It iterates over tokens which is separated by the supplied delimeters.



c:param	It adds a parameter in a containing 'import' tag's URL.


c:url	It creates a URL with optional query parameters.

refer JSTLAPP3